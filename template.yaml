AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sales

  Sample SAM Template for Sales

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 900
    MemorySize: 128
    CodeUri: ./
    Runtime: python3.9
    Architectures:
      - x86_64
    Environment:
      Variables:
        TABLE_NAME: !Ref salesTable
        CLIENT_ID: !Ref UserPoolSalesClient
        USER_POOL: !Ref UserPoolSales
        CLIENTS_GROUP: !Ref Clients
        SELLERS_GROUP: !Ref Sellers

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
Resources:
  SalesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: sales-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:UpdateItem
                - dynamodb:DescribeTable
                - dynamodb:DeleteItem
              Resource: [
                !GetAtt salesTable.Arn,
              ]
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
            - Effect: Allow
              Action:
                - lambda:*
              Resource: '*'
            - Effect: Allow
              Action:
                - cognito-idp:SignUp
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:AdminAddUserToGroup
                - cognito-idp:AdminGetUser
              Resource: '*' 
      RoleName: "SalesRole"
  salesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions: 
        - 
          AttributeName: "PK"
          AttributeType: "S"
        -
          AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "PK"
          KeyType: "HASH"
        -
          AttributeName: "SK"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "salesTable"
  UserPoolSales:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
       - email
      UserPoolName: "salesUserPool"
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
          TemporaryPasswordValidityDays: 10
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
        EmailSubject: 'Confirmaci√≥n de AWS'
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
  UserPoolSalesClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPoolSales
      AccessTokenValidity: 2
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
      IdTokenValidity: 2
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      SupportedIdentityProviders:
        - COGNITO
  Clients:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !Ref UserPoolSales
      GroupName: 'Clients'
      RoleArn: !GetAtt SalesRole.Arn
  Sellers:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !Ref UserPoolSales
      GroupName: 'Sellers'
      RoleArn: !GetAtt SalesRole.Arn
  UserPoolSalesDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: "sales-user-pool-domain"
      UserPoolId: !Ref UserPoolSales
  SignUpClientFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: clients/sign_up.sign_up_client
      Role: !GetAtt SalesRole.Arn
      Events:
        SignUpClient:
          Type: Api
          Properties:
            Path: /Client
            Method: post
  GetClientFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: clients/get_client.get_client
      Role: !GetAtt SalesRole.Arn
      Events:
        GetClient:
          Type: Api
          Properties:
            Path: /Client/{UserSub}
            Method: get
  SignUpSellerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sellers/sign_up.sign_up_seller
      Role: !GetAtt SalesRole.Arn
      Events:
        SignUpSeller:
          Type: Api
          Properties:
            Path: /Seller
            Method: post
  GetSellerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sellers/get_seller.get_seller
      Role: !GetAtt SalesRole.Arn
      Events:
        GetSeller:
          Type: Api
          Properties:
            Path: /Seller/{UserSub}
            Method: get
  GetSellersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sellers/get_sellers.get_sellers
      Role: !GetAtt SalesRole.Arn
      Events:
        GetSellers:
          Type: Api
          Properties:
            Path: /Seller
            Method: get
  AddProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: products/add_product.add_product
      Role: !GetAtt SalesRole.Arn
      Events:
        AddProduct:
          Type: Api
          Properties:
            Path: /Product
            Method: post
  UpdateProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: products/update_product.update_product
      Role: !GetAtt SalesRole.Arn
      Events:
        UpdateProduct:
          Type: Api
          Properties:
            Path: /Product/{product_id}
            Method: patch
  GetProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: products/get_products.get_products
      Role: !GetAtt SalesRole.Arn
      Events:
        GetProducts:
          Type: Api
          Properties:
            Path: /Product
            Method: get
  AddPurchaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: purchase/add_purchase.add_purchase
      Role: !GetAtt SalesRole.Arn
      Events:
        AddPurchase:
          Type: Api
          Properties:
            Path: /Purchase
            Method: post
  GetPurchasesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: purchase/get_purchases.get_purchases
      Role: !GetAtt SalesRole.Arn
      Events:
        GetPurchases:
          Type: Api
          Properties:
            Path: /Purchase
            Method: get
  LogInFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth/log_in.log_in
      Role: !GetAtt SalesRole.Arn
      Events:
        LogIn:
          Type: Api
          Properties:
            Path: /Login
            Method: post
      



# Outputs:
#   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#   # Find out more about other implicit resources you can reference within SAM
#   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#   HelloWorldApi:
#     Description: API Gateway endpoint URL for Prod stage for Hello World function
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#   HelloWorldFunction:
#     Description: Hello World Lambda Function ARN
#     Value: !GetAtt HelloWorldFunction.Arn
#   HelloWorldFunctionIamRole:
#     Description: Implicit IAM Role created for Hello World function
#     Value: !GetAtt HelloWorldFunctionRole.Arn
